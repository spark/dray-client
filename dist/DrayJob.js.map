{"version":3,"sources":["../src/DrayJob.js"],"names":["DrayJob","manager","parameters","_manager","_steps","_environment","_profiler","_stepsCompleted","setParameters","on","_statusChanged","bind","_stepCompleted","Object","assign","env","input","_input","source","environment","name","output","refresh","networkMode","cpuShares","memory","timeout","step","push","_promise","Promise","resolve","reject","_resolve","_reject","_subscription","_createRedisClient","_redisUrl","_onMessage","error","_onJobFailed","_submitJob","then","_lastTiming","Date","now","psubscribe","id","reason","_timout","setTimeout","_cleanup","_deleteJob","_getJobLogs","steps","map","item","keys","length","_mapEnvironment","Buffer","toString","JSON","stringify","channel","message","data","split","_","property","emit","value","_addProfilerFrame","newStatus","_status","_onJobCompleted","index","_timeout","clearTimeout","unsubscribe","quit","undefined","key","variable","redisUrl","createClient","status","elapsed","_createdAt","_finishedIn"],"mappings":"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","file":"DrayJob.js","sourcesContent":["/*eslint-disable curly */\nimport { EventEmitter } from 'events';\nimport redis from 'redis';\nimport TimeoutError from './TimeoutError';\n\n/**\n * Generic Dray job class\n * @module\n */\nexport class DrayJob extends EventEmitter {\n\t/**\n\t * DrayJob class constructor.\n\t *\n\t * @param {DrayManager} manager {DrayManager} instance\n\t * @param {Object} parameters Parameters to set\n\t */\n\tconstructor(manager, parameters) {\n\t\tsuper();\n\t\tthis._manager = manager;\n\t\tthis._steps = [];\n\t\tthis._environment = {};\n\t\tthis._profiler = [];\n\t\tthis._stepsCompleted = 0;\n\t\tthis.setParameters(parameters);\n\n\t\tthis.on('statusChanged', this._statusChanged.bind(this));\n\t\tthis.on('completedStepsChanged', this._stepCompleted.bind(this));\n\t}\n\n\t/**\n\t * Number of steps already completed\n\t *\n\t * @returns {Number}    Number of completed steps\n\t * @returns {undefined} If first step hasn't finished yet\n\t */\n\tget stepsCompleted() {\n\t\treturn this._stepsCompleted;\n\t}\n\n\t/**\n\t * Job status\n\t *\n\t * @returns {String} 'running'|'error'|'complete'\n\t */\n\tget status() {\n\t\treturn this._status;\n\t}\n\n\t/**\n\t * Job creation date\n\t *\n\t * @returns {Date} Job creation date\n\t */\n\tget createdAt() {\n\t\treturn this._createdAt;\n\t}\n\n\t/**\n\t * Job finish date.\n\t *\n\t * @returns {Date}      Job finish date\n\t * @returns {undefined} If job is still running\n\t */\n\tget finishedIn() {\n\t\treturn this._finishedIn;\n\t}\n\n\t/**\n\t * Job profile data\n\t *\n\t * @returns {Array} List of steps and their timings\n\t */\n\tget profiler() {\n\t\treturn this._profiler;\n\t}\n\n\t/**\n\t * Set job parameters from passed object\n\t *\n\t * @param {Object} parameters One of the following: name, input\n\t * @returns {this} `this` object\n\t */\n\tsetParameters(parameters) {\n\t\tObject.assign(this, parameters);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set job environment shared between steps\n\t *\n\t * @param {Object} env Object of environment variables\n\t * @returns {this} `this` object\n\t */\n\tsetEnvironment(env) {\n\t\tObject.assign(this._environment, env);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set job input data\n\t *\n\t * @param {Mixed} input Input to be sent\n\t * @returns {this} `this` object\n\t */\n\tsetInput(input) {\n\t\tthis._input = input;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a single job step\n\t *\n\t * @param {String} source Docker image to be run\n\t * @param {Object} environment (optional) Object containing environment variables for this step\n\t * @param {String} name (optional) Name of the step\n\t * @param {String} output (optional) Output channel to be captured\n\t * @param {Boolean} refresh (optional) If true, image will be pulled before\n\t * @param {String} networkMode (optional) Network mode for this container\n\t * @param {Number} cpuShares (optional) Container's CPU shares\n\t * @param {Number} memory (optional) Memory limit in bytes\n\t * @param {Number} timeout (optional) Step timeout in seconds\n\t * @returns {this} this object\n\t */\n\taddStep(source, environment, name, output, refresh, networkMode, cpuShares, memory, timeout) {\n\t\tlet step = { source, environment, name, output, refresh };\n\t\tif (networkMode) step.networkMode = networkMode;\n\t\tif (cpuShares) step.cpuShares = cpuShares;\n\t\tif (memory) step.memory = memory;\n\t\tif (timeout) step.timeout = timeout;\n\n\t\tthis._steps.push(step);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Submit job for execution\n\t *\n\t * @param {Object} timeout (optional) Timeout in ms\n\t * @returns {Promise} Resolved when job succeeds and rejected if fails\n\t */\n\tsubmit(timeout) {\n\t\t// Prepare submission promise\n\t\tthis._promise = new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\t\t});\n\t\t// Connect to Redis\n\t\tthis._subscription = this._createRedisClient(this._manager._redisUrl);\n\t\t// Hook onMessage handler\n\t\tthis._subscription.on('pmessage', this._onMessage.bind(this));\n\t\tthis._subscription.on('error', (error) => {\n\t\t\tthis._onJobFailed(error);\n\t\t});\n\n\t\t// Submit the job...\n\t\tthis._manager._submitJob(this).then(() => {\n\t\t\tthis._lastTiming = Date.now();\n\t\t\t// ...and once we know its ID, we can listen for change events\n\t\t\tthis._subscription.psubscribe(`${this.id}:*`);\n\t\t}, (reason) => {\n\t\t\tthis._onJobFailed(reason);\n\t\t});\n\n\t\t// If job timeout is specified\n\t\tif (timeout) {\n\t\t\tthis._timout = setTimeout(() => {\n\t\t\t\t// Fail the job when timeout reached\n\t\t\t\tthis._onJobFailed(new TimeoutError('Job has timed out'));\n\t\t\t}, timeout);\n\t\t}\n\n\t\treturn this._promise;\n\t}\n\n\t/**\n\t * Destroy job in Dray\n\t *\n\t * @returns {Promise} Resolved once job is destroyed\n\t */\n\tdestroy() {\n\t\tthis._cleanup();\n\t\treturn this._manager._deleteJob(this);\n\t}\n\n\n\t/**\n\t * Get array of job logs\n\t *\n\t * @returns {Promise} promise resolved with {Array} of logs\n\t */\n\tgetLogs() {\n\t\treturn this._manager._getJobLogs(this);\n\t}\n\n\t/**\n\t * Serialize job to Dray format\n\t *\n\t * @returns {String} Job JSON\n\t */\n\ttoJSON() {\n\t\tlet output = {\n\t\t\tsteps: this._steps.map((item) => {\n\t\t\t\t// Convert environment object to Dray format\n\t\t\t\tif (item.environment && Object.keys(item.environment).length > 0) {\n\t\t\t\t\titem.environment = this._mapEnvironment(item.environment);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t})\n\t\t};\n\n\t\tif (this.name) {\n\t\t\toutput.name = this.name;\n\t\t}\n\n\t\t// Convert environment object to Dray format\n\t\tif (Object.keys(this._environment).length > 0) {\n\t\t\toutput.environment = this._mapEnvironment(this._environment);\n\t\t}\n\n\t\t// Serialize input to base64\n\t\tif (this._input) {\n\t\t\toutput.input = new Buffer(this._input).toString('base64');\n\t\t}\n\t\treturn JSON.stringify(output);\n\t}\n\n\t/**\n\t * Redis message handler\n\t *\n\t * @param {String} channel Channel name\n\t * @param {String} message Message contents\n\t * @param {String} data    Additional data\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onMessage(channel, message, data) {\n\t\t// Message is in \"ID:property\" format\n\t\tlet [_, property] = message.split(':');\n\t\tthis.emit(`${property}Changed`, data);\n\t}\n\n\t/**\n\t * Callback for a job status changing to \"complete\"\n\t *\n\t * @param {Mixed} value Value to resolve the promise with\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onJobCompleted(value) {\n\t\tthis._resolve(value);\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Callback for a job status changing to \"error\"\n\t *\n\t * @param {Mixed} reason Reason to reject the promise with\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onJobFailed(reason) {\n\t\t// Add last profiling frame\n\t\tthis._addProfilerFrame(this._stepsCompleted, 'error');\n\n\t\tthis._reject(reason);\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Callback for a job status changing\n\t *\n\t * @param {String} newStatus New job status\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_statusChanged(newStatus) {\n\t\tthis._status = newStatus;\n\t\tif (this._status === 'complete') {\n\t\t\tthis._onJobCompleted();\n\t\t} else if (this._status === 'error') {\n\t\t\tthis._onJobFailed();\n\t\t}\n\t}\n\n\t/**\n\t * Callback for a job step completed\n\t *\n\t * @param {String} index One based step index\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_stepCompleted(index) {\n\t\tthis._stepsCompleted = index;\n\t\tthis._addProfilerFrame(this._stepsCompleted-1);\n\t}\n\n\t/**\n\t * Cleaning up function. Removes timeout and closes\n\t * Redis connection.\n\t *\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_cleanup() {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t}\n\t\tif (this._subscription) {\n\t\t\tthis._subscription.unsubscribe();\n\t\t\tthis._subscription.quit();\n\t\t\tthis._subscription = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Turn {Object} into env {Array} accepted by Dray.\n\t *\n\t * @param {Object} env Environment object\n\t * @returns {Array} Array accepted by Dray\n\t * @private\n\t */\n\t_mapEnvironment(env) {\n\t\treturn Object.keys(env).map((key) => {\n\t\t\treturn { variable: key, value: env[key].toString() };\n\t\t});\n\t}\n\n\t/**\n\t * Create an instance of Redis Client\n\t *\n\t * @param {String} redisUrl Redis URL\n\t * @returns {Redis} Redis Client instance\n\t * @private\n\t */\n\t_createRedisClient(redisUrl) {\n\t\treturn redis.createClient(redisUrl);\n\t}\n\n\t/**\n\t * Creates a timing data frame in internal profiler\n\t *\n\t * @param {Number} index  Step index\n\t * @param {String} status Status of the step\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_addProfilerFrame(index, status='complete') {\n\t\tthis._profiler.push({\n\t\t\tstep: this._steps[index],\n\t\t\telapsed: Date.now() - this._lastTiming,\n\t\t\tstatus: status\n\t\t});\n\t\tthis._lastTiming = Date.now();\n\t}\n}\n"]}
{"version":3,"sources":["../src/DrayJob.js"],"names":[],"mappings":"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","file":"DrayJob.js","sourcesContent":["import { EventEmitter } from 'events';\nimport redis from 'redis';\n\nexport class DrayJob extends EventEmitter {\n\t/**\n\t * DrayJob class constructor.\n\t *\n\t * @param {DrayManager} manager {DrayManager} instance\n\t * @param {Object} parameters Parameters to set\n\t */\n\tconstructor(manager, parameters) {\n\t\tsuper();\n\t\tthis._manager = manager;\n\t\tthis._steps = [];\n\t\tthis._environment = {};\n\t\tthis.setParameters(parameters);\n\n\t\tthis.on('statusChanged', this._statusChanged.bind(this));\n\t}\n\n\t/**\n\t * Number of steps already completed\n\t *\n\t * @returns {Number}    Number of completed steps\n\t * @returns {undefined} If first step hasn't finished yet\n\t */\n\tget stepsCompleted() {\n\t\treturn this._stepsCompleted;\n\t}\n\n\t/**\n\t * Job status\n\t *\n\t * @returns {String} 'running'|'error'|'complete'\n\t */\n\tget status() {\n\t\treturn this._status;\n\t}\n\n\t/**\n\t * Job creation date\n\t *\n\t * @returns {Date} Job creation date\n\t */\n\tget createdAt() {\n\t\treturn this._createdAt;\n\t}\n\n\t/**\n\t * Job finish date.\n\t *\n\t * @returns {Date}      Job finish date\n\t * @returns {undefined} If job is still running\n\t */\n\tget finishedIn() {\n\t\treturn this._finishedIn;\n\t}\n\n\t/**\n\t * Set job parameters from passed object\n\t *\n\t * @param {Object} parameters One of the following: name, input\n\t * @returns {this} `this` object\n\t */\n\tsetParameters(parameters) {\n\t\tObject.assign(this, parameters);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set job environment shared between steps\n\t *\n\t * @param {Object} env Object of environment variables\n\t * @returns {this} `this` object\n\t */\n\tsetEnvironment(env) {\n\t\tObject.assign(this._environment, env);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set job input data\n\t *\n\t * @param {Mixed} input Input to be sent\n\t * @returns {this} `this` object\n\t */\n\tsetInput(input) {\n\t\tthis._input = input;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a single job step\n\t *\n\t * @param {String} source Docker image to be run\n\t * @param {Object} environment (optional) Object containing environment variables for this step\n\t * @param {String} name (optional) Name of the step\n\t * @param {String} output (optional) Output channel to be captured\n\t * @param {Boolean} refresh (optional) If true, image will be pulled before\n\t * @returns {this} this object\n\t */\n\taddStep(source, environment, name, output, refresh) {\n\t\tthis._steps.push({source, environment, name, output, refresh});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Submit job for execution\n\t *\n\t * @param {Object} timeout (optional) Timeout in ms\n\t * @returns {Promise} Resolved when job succeeds and rejected if fails\n\t */\n\tsubmit(timeout) {\n\t\t// Prepare submission promise\n\t\tthis._promise = new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\t\t});\n\t\t// Connect to Redis\n\t\tthis._subscription = redis.createClient(this._manager._redisUrl);\n\t\t// Hook onMessage handler\n\t\tthis._subscription.on('pmessage', this._onMessage.bind(this));\n\t\tthis._subscription.on('error', (error) => {\n\t\t\tthis._onJobFailed('Redis error: ' + error.toString());\n\t\t});\n\n\t\t// Submit the job...\n\t\tthis._manager._submitJob(this).then(() => {\n\t\t\t// ...and once we know its ID, we can listen for change events\n\t\t\tthis._subscription.psubscribe(`${this.id}:*`);\n\t\t});\n\n\t\t// If job timeout is specified\n\t\tif (timeout) {\n\t\t\tthis._timout = setTimeout(() => {\n\t\t\t\t// Fail the job when timeout reached\n\t\t\t\tthis._onJobFailed('Job has timed out');\n\t\t\t}, timeout);\n\t\t}\n\n\t\treturn this._promise;\n\t}\n\n\t/**\n\t * Destroy job in Dray\n\t *\n\t * @returns {Promise} Resolved once job is destroyed\n\t */\n\tdestroy() {\n\t\tthis._cleanup();\n\t\treturn this._manager._deleteJob(this);\n\t}\n\n\n\t/**\n\t * Get array of job logs\n\t *\n\t * @returns {Promise} promise resolved with {Array} of logs\n\t */\n\tgetLogs() {\n\t\treturn this._manager._getJobLogs(this);\n\t}\n\n\t/**\n\t * Serialize job to Dray format\n\t *\n\t * @returns {String} Job JSON\n\t */\n\ttoJSON() {\n\t\tlet output = {\n\t\t\tsteps: this._steps.map((item) => {\n\t\t\t\t// Convert environment object to Dray format\n\t\t\t\tif (item.environment && Object.keys(item.environment).length > 0) {\n\t\t\t\t\titem.environment = this._mapEnvironment(item.environment);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t})\n\t\t};\n\n\t\tif (this.name) {\n\t\t\toutput.name = this.name;\n\t\t}\n\n\t\t// Convert environment object to Dray format\n\t\tif (Object.keys(this._environment).length > 0) {\n\t\t\toutput.environment = this._mapEnvironment(this._environment);\n\t\t}\n\n\t\t// Serialize input to base64\n\t\tif (this._input) {\n\t\t\toutput.input = new Buffer(this._input).toString('base64');\n\t\t}\n\t\treturn JSON.stringify(output);\n\t}\n\n\t/**\n\t * Redis message handler\n\t *\n\t * @param {String} channel Channel name\n\t * @param {String} message Message contents\n\t * @param {String} data    Additional data\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onMessage(channel, message, data) {\n\t\t// Message is in \"ID:property\" format\n\t\tlet [_, property] = message.split(':');\n\t\tthis.emit(`${property}Changed`, data);\n\t}\n\n\t/**\n\t * Callback for a job status changing to \"complete\"\n\t *\n\t * @param {Mixed} value Value to resolve the promise with\n\t * @returns {undefined}\n\t */\n\t_onJobCompleted(value) {\n\t\tthis._resolve(value);\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Callback for a job status changing to \"error\"\n\t *\n\t * @param {Mixed} reason Reason to reject the promise with\n\t * @returns {undefined}\n\t */\n\t_onJobFailed(reason) {\n\t\tthis._reject(reason);\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Callback for a job status changing\n\t *\n\t * @param {String} newStatus New job status\n\t * @returns {undefined}\n\t */\n\t_statusChanged(newStatus) {\n\t\tthis._status = newStatus;\n\t\tif (this._status === 'complete') {\n\t\t\tthis._onJobCompleted();\n\t\t} else if (this._status === 'error') {\n\t\t\tthis._onJobFailed();\n\t\t}\n\t}\n\n\t/**\n\t * Cleaning up function. Removes timeout and closes\n\t * Redis connection.\n\t *\n\t * @returns {undefined}\n\t */\n\t_cleanup() {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t}\n\t\tif (this._subscription) {\n\t\t\tthis._subscription.unsubscribe();\n\t\t\tthis._subscription.quit();\n\t\t\tthis._subscription = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Turn {Object} into env {Array} accepted by Dray.\n\t *\n\t * @param {Object} env Environment object\n\t * @returns {Array} Array accepted by Dray\n\t */\n\t_mapEnvironment(env) {\n\t\treturn Object.keys(env).map((key) => {\n\t\t\treturn { variable: key, value: env[key].toString() };\n\t\t});\n\t}\n}\n"]}
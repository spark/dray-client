{"version":3,"sources":["../src/DrayJob.js"],"names":["DrayJob","manager","parameters","_manager","_steps","_environment","setParameters","on","_statusChanged","bind","Object","assign","env","input","_input","source","environment","name","output","refresh","networkMode","cpuShares","memory","step","push","timeout","_promise","Promise","resolve","reject","_resolve","_reject","_subscription","_createRedisClient","_redisUrl","_onMessage","error","_onJobFailed","_submitJob","then","psubscribe","id","reason","_timout","setTimeout","_cleanup","_deleteJob","_getJobLogs","steps","map","item","keys","length","_mapEnvironment","Buffer","toString","JSON","stringify","channel","message","data","split","_","property","emit","value","newStatus","_status","_onJobCompleted","_timeout","clearTimeout","unsubscribe","quit","undefined","key","variable","redisUrl","createClient","_stepsCompleted","_createdAt","_finishedIn"],"mappings":"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","file":"DrayJob.js","sourcesContent":["/*eslint-disable curly */\nimport { EventEmitter } from 'events';\nimport redis from 'redis';\nimport TimeoutError from './TimeoutError';\n\nexport class DrayJob extends EventEmitter {\n\t/**\n\t * DrayJob class constructor.\n\t *\n\t * @param {DrayManager} manager {DrayManager} instance\n\t * @param {Object} parameters Parameters to set\n\t */\n\tconstructor(manager, parameters) {\n\t\tsuper();\n\t\tthis._manager = manager;\n\t\tthis._steps = [];\n\t\tthis._environment = {};\n\t\tthis.setParameters(parameters);\n\n\t\tthis.on('statusChanged', this._statusChanged.bind(this));\n\t}\n\n\t/**\n\t * Number of steps already completed\n\t *\n\t * @returns {Number}    Number of completed steps\n\t * @returns {undefined} If first step hasn't finished yet\n\t */\n\tget stepsCompleted() {\n\t\treturn this._stepsCompleted;\n\t}\n\n\t/**\n\t * Job status\n\t *\n\t * @returns {String} 'running'|'error'|'complete'\n\t */\n\tget status() {\n\t\treturn this._status;\n\t}\n\n\t/**\n\t * Job creation date\n\t *\n\t * @returns {Date} Job creation date\n\t */\n\tget createdAt() {\n\t\treturn this._createdAt;\n\t}\n\n\t/**\n\t * Job finish date.\n\t *\n\t * @returns {Date}      Job finish date\n\t * @returns {undefined} If job is still running\n\t */\n\tget finishedIn() {\n\t\treturn this._finishedIn;\n\t}\n\n\t/**\n\t * Set job parameters from passed object\n\t *\n\t * @param {Object} parameters One of the following: name, input\n\t * @returns {this} `this` object\n\t */\n\tsetParameters(parameters) {\n\t\tObject.assign(this, parameters);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set job environment shared between steps\n\t *\n\t * @param {Object} env Object of environment variables\n\t * @returns {this} `this` object\n\t */\n\tsetEnvironment(env) {\n\t\tObject.assign(this._environment, env);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set job input data\n\t *\n\t * @param {Mixed} input Input to be sent\n\t * @returns {this} `this` object\n\t */\n\tsetInput(input) {\n\t\tthis._input = input;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a single job step\n\t *\n\t * @param {String} source Docker image to be run\n\t * @param {Object} environment (optional) Object containing environment variables for this step\n\t * @param {String} name (optional) Name of the step\n\t * @param {String} output (optional) Output channel to be captured\n\t * @param {Boolean} refresh (optional) If true, image will be pulled before\n\t * @param {String} networkMode (optional) Network mode for this container\n\t * @param {Number} cpuShares (optional) Container's CPU shares\n\t * @param {Number} memory (optional) Memory limit in bytes\n\t * @returns {this} this object\n\t */\n\taddStep(source, environment, name, output, refresh, networkMode, cpuShares, memory) {\n\t\tlet step = { source, environment, name, output, refresh };\n\t\tif (networkMode) step.networkMode = networkMode;\n\t\tif (cpuShares) step.cpuShares = cpuShares;\n\t\tif (memory) step.memory = memory;\n\n\t\tthis._steps.push(step);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Submit job for execution\n\t *\n\t * @param {Object} timeout (optional) Timeout in ms\n\t * @returns {Promise} Resolved when job succeeds and rejected if fails\n\t */\n\tsubmit(timeout) {\n\t\t// Prepare submission promise\n\t\tthis._promise = new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\t\t});\n\t\t// Connect to Redis\n\t\tthis._subscription = this._createRedisClient(this._manager._redisUrl);\n\t\t// Hook onMessage handler\n\t\tthis._subscription.on('pmessage', this._onMessage.bind(this));\n\t\tthis._subscription.on('error', (error) => {\n\t\t\tthis._onJobFailed(error);\n\t\t});\n\n\t\t// Submit the job...\n\t\tthis._manager._submitJob(this).then(() => {\n\t\t\t// ...and once we know its ID, we can listen for change events\n\t\t\tthis._subscription.psubscribe(`${this.id}:*`);\n\t\t}, (reason) => {\n\t\t\tthis._onJobFailed(reason);\n\t\t});\n\n\t\t// If job timeout is specified\n\t\tif (timeout) {\n\t\t\tthis._timout = setTimeout(() => {\n\t\t\t\t// Fail the job when timeout reached\n\t\t\t\tthis._onJobFailed(new TimeoutError('Job has timed out'));\n\t\t\t}, timeout);\n\t\t}\n\n\t\treturn this._promise;\n\t}\n\n\t/**\n\t * Destroy job in Dray\n\t *\n\t * @returns {Promise} Resolved once job is destroyed\n\t */\n\tdestroy() {\n\t\tthis._cleanup();\n\t\treturn this._manager._deleteJob(this);\n\t}\n\n\n\t/**\n\t * Get array of job logs\n\t *\n\t * @returns {Promise} promise resolved with {Array} of logs\n\t */\n\tgetLogs() {\n\t\treturn this._manager._getJobLogs(this);\n\t}\n\n\t/**\n\t * Serialize job to Dray format\n\t *\n\t * @returns {String} Job JSON\n\t */\n\ttoJSON() {\n\t\tlet output = {\n\t\t\tsteps: this._steps.map((item) => {\n\t\t\t\t// Convert environment object to Dray format\n\t\t\t\tif (item.environment && Object.keys(item.environment).length > 0) {\n\t\t\t\t\titem.environment = this._mapEnvironment(item.environment);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t})\n\t\t};\n\n\t\tif (this.name) {\n\t\t\toutput.name = this.name;\n\t\t}\n\n\t\t// Convert environment object to Dray format\n\t\tif (Object.keys(this._environment).length > 0) {\n\t\t\toutput.environment = this._mapEnvironment(this._environment);\n\t\t}\n\n\t\t// Serialize input to base64\n\t\tif (this._input) {\n\t\t\toutput.input = new Buffer(this._input).toString('base64');\n\t\t}\n\t\treturn JSON.stringify(output);\n\t}\n\n\t/**\n\t * Redis message handler\n\t *\n\t * @param {String} channel Channel name\n\t * @param {String} message Message contents\n\t * @param {String} data    Additional data\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onMessage(channel, message, data) {\n\t\t// Message is in \"ID:property\" format\n\t\tlet [_, property] = message.split(':');\n\t\tthis.emit(`${property}Changed`, data);\n\t}\n\n\t/**\n\t * Callback for a job status changing to \"complete\"\n\t *\n\t * @param {Mixed} value Value to resolve the promise with\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onJobCompleted(value) {\n\t\tthis._resolve(value);\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Callback for a job status changing to \"error\"\n\t *\n\t * @param {Mixed} reason Reason to reject the promise with\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_onJobFailed(reason) {\n\t\tthis._reject(reason);\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Callback for a job status changing\n\t *\n\t * @param {String} newStatus New job status\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_statusChanged(newStatus) {\n\t\tthis._status = newStatus;\n\t\tif (this._status === 'complete') {\n\t\t\tthis._onJobCompleted();\n\t\t} else if (this._status === 'error') {\n\t\t\tthis._onJobFailed();\n\t\t}\n\t}\n\n\t/**\n\t * Cleaning up function. Removes timeout and closes\n\t * Redis connection.\n\t *\n\t * @returns {undefined}\n\t * @private\n\t */\n\t_cleanup() {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t}\n\t\tif (this._subscription) {\n\t\t\tthis._subscription.unsubscribe();\n\t\t\tthis._subscription.quit();\n\t\t\tthis._subscription = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Turn {Object} into env {Array} accepted by Dray.\n\t *\n\t * @param {Object} env Environment object\n\t * @returns {Array} Array accepted by Dray\n\t * @private\n\t */\n\t_mapEnvironment(env) {\n\t\treturn Object.keys(env).map((key) => {\n\t\t\treturn { variable: key, value: env[key].toString() };\n\t\t});\n\t}\n\n\t/**\n\t * Create an instance of Redis Client\n\t *\n\t * @param {String} redisUrl Redis URL\n\t * @returns {Redis} Redis Client instance\n\t * @private\n\t */\n\t_createRedisClient(redisUrl) {\n\t\treturn redis.createClient(redisUrl);\n\t}\n}\n"]}
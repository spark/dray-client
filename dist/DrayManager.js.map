{"version":3,"sources":["../src/DrayManager.js"],"names":["DrayManager","drayUrl","redisUrl","_drayUrl","_redisUrl","_agent","Promise","parameters","job","setParameters","_request","then","value","res","body","map","item","_onRejected","toJSON","Object","assign","id","lines","url","method","data","undefined","end","reason","reject"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;AAEA;;;;IAIaA,W,WAAAA,W;AACZ;;;;;;AAMA,sBAAYC,OAAZ,EAAqBC,QAArB,EAA+B;AAAA;;AAC9B,OAAKC,QAAL,GAAgBF,OAAhB;AACA,OAAKG,SAAL,GAAiBF,QAAjB;AACA,OAAKG,MAAL,GAAc,uDAA8BC,OAA9B,CAAd;AACA;;AAED;;;;;;;;;;4BAMUC,U,EAAY;AACrB,OAAIC,MAAM,qBAAY,IAAZ,CAAV;AACAA,OAAIC,aAAJ,CAAkBF,UAAlB;AACA,UAAOC,GAAP;AACA;;AAED;;;;;;;;6BAKW;AAAA;;AACV,UAAO,KAAKE,QAAL,CAAc,MAAd,EAAsBC,IAAtB,CAA2B,UAACC,KAAD,EAAW;AAC5C,WAAOA,MAAMC,GAAN,CAAUC,IAAV,CAAeC,GAAf,CAAmB,UAACC,IAAD,EAAU;AACnC,SAAIR,MAAM,4BAAkBQ,IAAlB,CAAV;AACA,YAAOR,GAAP;AACA,KAHM,CAAP;AAIA,IALM,EAKJ,KAAKS,WALD,CAAP;AAMA;;AAED;;;;;;;;;;6BAOWT,G,EAAK;AACf,UAAO,KAAKE,QAAL,CAAc,MAAd,EAAsB,MAAtB,EAA8BF,IAAIU,MAAJ,EAA9B,EAA4CP,IAA5C,CAAiD,UAACC,KAAD,EAAW;AAClEO,WAAOC,MAAP,CAAcZ,GAAd,EAAmBI,MAAMC,GAAN,CAAUC,IAA7B;AACA,WAAON,GAAP;AACA,IAHM,EAGJ,KAAKS,WAHD,CAAP;AAIA;;AAED;;;;;;;;;;6BAOWT,G,EAAK;AACf,UAAO,KAAKE,QAAL,WAAsBF,IAAIa,EAA1B,EAAgC,KAAhC,EAAuCV,IAAvC,CAA4C,UAACC,KAAD,EAAW;AAC7D,WAAOA,MAAMC,GAAN,CAAUC,IAAjB;AACA,IAFM,EAEJ,KAAKG,WAFD,CAAP;AAGA;;AAED;;;;;;;;;;8BAOYT,G,EAAK;AAChB,UAAO,KAAKE,QAAL,WAAsBF,IAAIa,EAA1B,WAAoCV,IAApC,CAAyC,UAACC,KAAD,EAAW;AAC1D,WAAOA,MAAMC,GAAN,CAAUC,IAAV,CAAeQ,KAAtB;AACA,IAFM,EAEJ,KAAKL,WAFD,CAAP;AAGA;;AAED;;;;;;;;;;;;2BASSM,G,EAAmC;AAAA,OAA9BC,MAA8B,uEAAvB,KAAuB;AAAA,OAAhBC,IAAgB,uEAAXC,SAAW;;AAC3C,UAAO,KAAKrB,MAAL,CAAYmB,MAAZ,EAAuB,KAAKrB,QAA5B,SAAwCoB,GAAxC,EAA+CE,IAA/C,EAAqDE,GAArD,EAAP;AACA;;;8BAEWC,M,EAAQ;AACnB,UAAOtB,QAAQuB,MAAR,CAAeD,MAAf,CAAP;AACA","file":"DrayManager.js","sourcesContent":["import { DrayJob } from './DrayJob';\nimport superagent from 'superagent';\nimport superagentPromise from 'superagent-promise';\n\n/**\n * Main class for managing Dray jobs\n * @module\n */\nexport class DrayManager {\n\t/**\n\t * DrayManager class constructor.\n\t *\n\t * @param {String} drayUrl URL for Dray instance\n\t * @param {String} redisUrl URL for Redis instance\n\t */\n\tconstructor(drayUrl, redisUrl) {\n\t\tthis._drayUrl = drayUrl;\n\t\tthis._redisUrl = redisUrl;\n\t\tthis._agent = superagentPromise(superagent, Promise);\n\t}\n\n\t/**\n\t * Instantiate, set parameters and return {DrayJob}\n\t *\n\t * @param {Object} parameters Parameters to set\n\t * @returns {DrayJob} Job ready to execute\n\t */\n\tcreateJob(parameters) {\n\t\tlet job = new DrayJob(this);\n\t\tjob.setParameters(parameters);\n\t\treturn job;\n\t}\n\n\t/**\n\t * List submitted Dray jobs\n\t *\n\t * @returns {Promise} Resolves into {Array} of jobs\n\t */\n\tlistJobs() {\n\t\treturn this._request('jobs').then((value) => {\n\t\t\treturn value.res.body.map((item) => {\n\t\t\t\tlet job = new DrayJob(this, item);\n\t\t\t\treturn job;\n\t\t\t});\n\t\t}, this._onRejected);\n\t}\n\n\t/**\n\t * Submit the job to Dray\n\t *\n\t * @param {DrayJob} job Job to submit\n\t * @returns {Promise} Resolves to {DrayJob} if success\n\t * @private\n\t */\n\t_submitJob(job) {\n\t\treturn this._request('jobs', 'post', job.toJSON()).then((value) => {\n\t\t\tObject.assign(job, value.res.body);\n\t\t\treturn job;\n\t\t}, this._onRejected);\n\t}\n\n\t/**\n\t * Delete job from Dray\n\t *\n\t * @param {DrayJob} job Job to delete\n\t * @returns {Promise} Resolves with Dray result\n\t * @private\n\t */\n\t_deleteJob(job) {\n\t\treturn this._request(`jobs/${job.id}`, 'del').then((value) => {\n\t\t\treturn value.res.body;\n\t\t}, this._onRejected);\n\t}\n\n\t/**\n\t * Get logs for specified job\n\t *\n\t * @param {DrayJob} job Job for which to get logs\n\t * @returns {Promise} Resolves to and {Array} containing logs\n\t * @private\n\t */\n\t_getJobLogs(job) {\n\t\treturn this._request(`jobs/${job.id}/log`).then((value) => {\n\t\t\treturn value.res.body.lines;\n\t\t}, this._onRejected);\n\t}\n\n\t/**\n\t * Send a request to Dray instance\n\t *\n\t * @param {String} url URL appended to Dray's URL\n\t * @param {String} method (optional) HTTP method, defaults to GET\n\t * @param {Mixed}  data (optional) Data to be passed\n\t * @returns {Promise} resolved with request response\n\t * @private\n\t */\n\t_request(url, method='get', data=undefined) {\n\t\treturn this._agent[method](`${this._drayUrl}/${url}`, data).end();\n\t}\n\n\t_onRejected(reason) {\n\t\treturn Promise.reject(reason);\n\t}\n}\n"]}
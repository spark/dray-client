{"version":3,"sources":["../src/BuildpackJob.js"],"names":["promisifyAll","RedisClient","prototype","BuildpackJob","manager","parameters","redisExpireIn","_redisExpireIn","_files","_buildpacks","_manager","setEnvironment","REDIS_URL","_redisUrl","REDIS_EXPIRE_IN","files","push","buildpacks","timeout","buildpack","env","INPUT_FROM_STDIN","ARCHIVE_OUTPUT","addStep","undefined","args","source","name","refresh","networkMode","cpuShares","memory","apply","Promise","_prepareInput","bind","then","_onResolved","_onRejected","callback","length","_archiveFiles","archive","setInput","client","createClient","getAsync","id","output","promise","_unarchiveFiles","quit","reason","reject","getLogs","logs","_resolve","_reject","resolve","stream","buffer","Buffer","on","data","concat","gzip","err","pipe","file","append","finalize","array","duplex","extract","_typedArrayToStream","header","next","type","filename","replace","chunk","resume","error"],"mappings":"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","file":"BuildpackJob.js","sourcesContent":["import archiver from 'archiver';\nimport redis from 'redis';\nimport bluebird from 'bluebird';\nbluebird.promisifyAll(redis.RedisClient.prototype);\nimport gunzip from 'gunzip-maybe';\nimport tar from 'tar-stream';\nimport { Duplex } from 'stream';\n\nimport { PassThrough } from 'stream';\nimport { DrayJob } from './DrayJob';\n\n/**\n * Dray job that uses Particle Buildpacks\n * @module\n */\nexport class BuildpackJob extends DrayJob {\n\t/**\n\t * BuildpackJob class constructor.\n\t *\n\t * @param {DrayManager} manager {DrayManager} instance\n\t * @param {Object} parameters Parameters to set\n\t * @param {Number} redisExpireIn Expiration time in seconds for output stored in Redis\n\t */\n\tconstructor(manager, parameters, redisExpireIn=600) {\n\t\tsuper(manager, parameters);\n\n\t\tthis._redisExpireIn = redisExpireIn;\n\t\tthis._files = [];\n\t\tthis._buildpacks = [];\n\n\t\tif (this._manager) {\n\t\t\tthis.setEnvironment({\n\t\t\t\tREDIS_URL: this._manager._redisUrl,\n\t\t\t\tREDIS_EXPIRE_IN: this._redisExpireIn\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Add files to the job.\n\t * Array should contain {Object}s with `filename` {String} and\n\t * `data` {Buffer} or {String} properties. I.e.:\n\t *\n\t * job.addFiles([{\n\t * \tfilename: 'foo.ino',\n\t * \tdata: fs.readFileSync('foo.ino')\n\t * }]);\n\t *\n\t * @param {Array} files Array of files to add\n\t * @returns {this} `this` object\n\t */\n\taddFiles(files) {\n\t\tthis._files.push(...files);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets buildpacks to be used during compilation.\n\t * List will be appended by storing buildpack.\n\t *\n\t * @param {Array} buildpacks {Array} of {String}s specifying Docker images\n\t * @returns {this} `this` object\n\t */\n\tsetBuildpacks(buildpacks) {\n\t\tthis._buildpacks = buildpacks;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Submits job\n\t *\n\t * @param  {Number} timeout Job timeout in ms\n\t * @return {Promise} Will resolve when job finished.\n\t */\n\tsubmit(timeout) {\n\t\tfor (let buildpack of this._buildpacks) {\n\t\t\t// We want each buildpack to pass output directory to input of a\n\t\t\t// next one. Setting following envs and output argument does that\n\t\t\tlet env = {\n\t\t\t\tINPUT_FROM_STDIN: true,\n\t\t\t\tARCHIVE_OUTPUT: true\n\t\t\t};\n\n\t\t\tif (typeof buildpack === 'string') {\n\t\t\t\tthis.addStep(buildpack, env, undefined, '/output.tar.gz');\n\t\t\t} else {\n\t\t\t\tlet args = [\n\t\t\t\t\tbuildpack.source,\n\t\t\t\t\tenv,\n\t\t\t\t\tbuildpack.name,\n\t\t\t\t\t'/output.tar.gz',\n\t\t\t\t\tbuildpack.refresh ? buildpack.refresh : undefined,\n\t\t\t\t\tbuildpack.networkMode ? buildpack.networkMode : undefined,\n\t\t\t\t\tbuildpack.cpuShares ? buildpack.cpuShares : undefined,\n\t\t\t\t\tbuildpack.memory ? buildpack.memory : undefined,\n\t\t\t\t\tbuildpack.timeout ? buildpack.timeout : undefined\n\t\t\t\t];\n\t\t\t\tthis.addStep.apply(this, args);\n\t\t\t}\n\t\t}\n\n\t\treturn new Promise(this._prepareInput.bind(this))\n\t\t\t.then(super.submit.bind(this, timeout))\n\t\t\t.then(this._onResolved.bind(this),\n\t\t\t\t\t\tthis._onRejected.bind(this));\n\t}\n\n\t/**\n\t * If any files were passed, archive them and set as input.\n\t *\n\t * @param {Function} callback Callback when finished\n\t * @returns {Mixed} {undefined} or result of the callback\n\t * @private\n\t */\n\t_prepareInput(callback) {\n\t\t// If we have files to compile, archive them first\n\t\tif (this._files.length > 0) {\n\t\t\treturn callback(this._archiveFiles(this._files).then((archive) => {\n\t\t\t\tthis.setInput(archive);\n\t\t\t}));\n\t\t}\n\t\tcallback();\n\t}\n\n\t/**\n\t * Callback for successful compilation. Any contents of last buildpack's\n\t * output should be in Redis. This will fetch and return it.\n\t *\n\t * @returns {Promise} Resolved with job output\n\t * @private\n\t */\n\t_onResolved() {\n\t\t// Compilation finished.\n\t\tlet client = redis.createClient(this._manager._redisUrl, {\n\t\t\t'return_buffers': true\n\t\t});\n\t\treturn client.getAsync(`jobs:${this.id}:output`).then((output) => {\n\t\t\t// Unpack the output\n\t\t\tif (output) {\n\t\t\t\tlet promise = this._unarchiveFiles(output);\n\t\t\t\tpromise.then(() => client.quit(), () => client.quit());\n\t\t\t\treturn promise;\n\t\t\t}\n\n\t\t\tclient.quit();\n\t\t\t// Return the empty output\n\t\t\treturn output;\n\t\t}, (reason) => reason);\n\t}\n\n\t/**\n\t * Callback for failed compilation.\n\t *\n\t * @param {Object} reason Reason for the rejection\n\t * @return {Promise} Rejected promise with logs\n\t * @private\n\t */\n\t_onRejected(reason) {\n\t\tif (reason) {\n\t\t\treturn Promise.reject(reason);\n\t\t}\n\t\treturn this.getLogs().then((logs) => {\n\t\t\t// Because successful `getLogs` call resolves instead of rejecting\n\t\t\t// we're returning a rejected promise instead\n\t\t\treturn Promise.reject(logs);\n\t\t});\n\t}\n\n\t/**\n\t * Create tar.gz archive from files\n\t *\n\t * @param {Array} files An array of files to archive\n\t * @returns {Promise} A promise resolved with a {Buffer} containing the archive\n\t * @private\n\t */\n\t_archiveFiles(files) {\n\t\t// Defer promise\n\t\tlet _resolve, _reject;\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\t_resolve = resolve;\n\t\t\t_reject = reject;\n\t\t});\n\t\t// Prepare output stream and buffer\n\t\tlet stream = new PassThrough();\n\t\tlet buffer = new Buffer('');\n\t\tstream.on('finish', () => {\n\t\t\t_resolve(buffer);\n\t\t});\n\t\tstream.on('data', (data) => {\n\t\t\tbuffer = Buffer.concat([buffer, data]);\n\t\t});\n\n\t\t// Initialize archiver\n\t\tlet archive = archiver('tar', { gzip: true });\n\t\tarchive.on('error', (err) => {\n\t\t\t_reject(err);\n\t\t});\n\t\tarchive.pipe(stream);\n\n\t\t// Append all files\n\t\tfor (let file of files) {\n\t\t\tarchive.append(file.data, file);\n\t\t}\n\t\tarchive.finalize();\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Turn a typed array to stream\n\t *\n\t * @param {UInt8Array} array Array to convert\n\t * @returns {Stream} Converted stream\n\t * @private\n\t */\n\t_typedArrayToStream(array) {\n\t\tconst duplex = new Duplex();\n\t\tduplex.push(array);\n\t\tduplex.push(null);\n\n\t\treturn duplex;\n\t}\n\n\t/**\n\t * Untar tar.gz compressed output\n\t *\n\t * @param {UInt8Array} archive Typed array containing .tar.gz archive\n\t * @returns {Promise} Promise resolved with the files\n\t * @private\n\t */\n\t_unarchiveFiles(archive) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst extract = tar.extract();\n\t\t\tconst duplex = this._typedArrayToStream(archive);\n\t\t\tlet files = {};\n\n\t\t\textract.on('entry', (header, stream, next) => {\n\t\t\t\tif (header.type !== 'file') {\n\t\t\t\t\tnext();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst filename = header.name.replace('./', '');\n\t\t\t\tfiles[filename] = [];\n\n\t\t\t\tstream.on('data', (chunk) => {\n\t\t\t\t\tfiles[filename].push(chunk);\n\t\t\t\t});\n\n\t\t\t\tstream.on('end', () => {\n\t\t\t\t\tfiles[filename] = Buffer.concat(files[filename]);\n\t\t\t\t\tnext();\n\t\t\t\t});\n\n\t\t\t\tstream.resume();\n\t\t\t});\n\n\t\t\textract.on('finish', () => {\n\t\t\t\tresolve(files);\n\t\t\t});\n\n\t\t\textract.on('error', (error) => reject(error));\n\n\t\t\tduplex.pipe(gunzip()).pipe(extract);\n\t\t});\n\t}\n}\n"]}
{"version":3,"sources":["../src/BuildpackJob.js"],"names":[],"mappings":"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","file":"BuildpackJob.js","sourcesContent":["import 'babel-polyfill';\nimport archiver from 'archiver';\nimport redis from 'redis';\nimport bluebird from 'bluebird';\nbluebird.promisifyAll(redis.RedisClient.prototype);\n\nimport { PassThrough } from 'stream';\nimport { DrayJob } from './DrayJob';\n\nexport class BuildpackJob extends DrayJob {\n\tconstructor(manager, parameters, redisExpireIn=600) {\n\t\tsuper(manager, parameters);\n\n\t\tthis._redisExpireIn = redisExpireIn;\n\t\tthis._files = [];\n\t\tthis._buildpacks = [];\n\n\t\tif (this._manager) {\n\t\t\tthis.setEnvironment({\n\t\t\t\tREDIS_URL: this._manager._redisUrl,\n\t\t\t\tREDIS_EXPIRE_IN: this._redisExpireIn\n\t\t\t});\n\t\t}\n\t}\n\n\taddFiles(files) {\n\t\tthis._files.push(...files);\n\t\treturn this;\n\t}\n\n\tsetBuildpacks(buildpacks) {\n\t\tthis._buildpacks = buildpacks;\n\t\tthis._buildpacks.push('particle/buildpack-store');\n\t\treturn this;\n\t}\n\n\tsubmit(timeout) {\n\t\tfor (let buildpack of this._buildpacks) {\n\t\t\t// We want each buildpack to pass output directory to input of a\n\t\t\t// next one. Setting following envs and output argument does that\n\t\t\tlet env = {\n\t\t\t\tINPUT_FROM_STDIN: true,\n\t\t\t\tARCHIVE_OUTPUT: true\n\t\t\t};\n\t\t\tthis.addStep(buildpack, env, undefined, '/output.tar.gz');\n\t\t}\n\n\t\treturn new Promise((resolve) => {\n\t\t\t// If we have files to compile, archive them first\n\t\t\tif (this._files.length > 0) {\n\t\t\t\treturn resolve(this._archiveFiles().then((archive) => {\n\t\t\t\t\tthis.setInput(archive);\n\t\t\t\t}));\n\t\t\t}\n\t\t\tresolve();\n\t\t}).then(() => {\n\t\t\t// Submit this as any regular job\n\t\t\treturn super.submit(timeout);\n\t\t}).then(() => {\n\t\t\tthis.destroy();\n\t\t\t// Compilation finished. Any contents of last buildpack's output\n\t\t\t// should be in Redis. Just fetch and return it\n\t\t\tlet client = redis.createClient(this._manager._redisUrl);\n\t\t\treturn client.hgetallAsync(this.id).then((value) => {\n\t\t\t\tclient.quit();\n\t\t\t\treturn value;\n\t\t\t});\n\t\t}, () => {\n\t\t\treturn this.getLogs().then((logs) => {\n\t\t\t\tthis.destroy();\n\t\t\t\t// Because successful `getLogs` call resolves instead of rejecting\n\t\t\t\t// we're returning a rejected promise instead\n\t\t\t\treturn Promise.reject(logs);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Create tar.gz archive from files\n\t *\n\t * @returns {Buffer} archived files\n\t * @private\n\t */\n\t_archiveFiles() {\n\t\t// Defer promise\n\t\tlet _resolve, _reject;\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\t_resolve = resolve;\n\t\t\t_reject = reject;\n\t\t});\n\t\t// Prepare output stream and buffer\n\t\tlet stream = new PassThrough();\n\t\tlet buffer = new Buffer('');\n\t\tstream.on('finish', () => {\n\t\t\t_resolve(buffer);\n\t\t});\n\t\tstream.on('data', (data) => {\n\t\t\tbuffer = Buffer.concat([buffer, data]);\n\t\t});\n\n\t\t// Initialize archiver\n\t\tlet archive = archiver('tar', {gzip: true});\n\t\tarchive.on('error', (err) => {\n\t\t\t_reject(err);\n\t\t});\n\t\tarchive.pipe(stream);\n\n\t\t// Append all files\n\t\tfor (let file of this._files) {\n\t\t\tarchive.append(file.data, file);\n\t\t}\n\t\tarchive.finalize();\n\t\treturn promise;\n\t}\n}\n"]}
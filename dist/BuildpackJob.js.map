{"version":3,"sources":["../src/BuildpackJob.js"],"names":[],"mappings":"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","file":"BuildpackJob.js","sourcesContent":["import archiver from 'archiver';\nimport redis from 'redis';\nimport bluebird from 'bluebird';\nbluebird.promisifyAll(redis.RedisClient.prototype);\n\nimport { PassThrough } from 'stream';\nimport { DrayJob } from './DrayJob';\n\nexport class BuildpackJob extends DrayJob {\n\t/**\n\t * BuildpackJob class constructor.\n\t *\n\t * @param {DrayManager} manager {DrayManager} instance\n\t * @param {Object} parameters Parameters to set\n\t * @param {Number} redisExpireIn Expiration time in seconds for output stored in Redis\n\t */\n\tconstructor(manager, parameters, redisExpireIn=600) {\n\t\tsuper(manager, parameters);\n\n\t\tthis._redisExpireIn = redisExpireIn;\n\t\tthis._files = [];\n\t\tthis._buildpacks = [];\n\n\t\tif (this._manager) {\n\t\t\tthis.setEnvironment({\n\t\t\t\tREDIS_URL: this._manager._redisUrl,\n\t\t\t\tREDIS_EXPIRE_IN: this._redisExpireIn\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Add files to the job.\n\t * Array should contain {Object}s with `filename` {String} and\n\t * `data` {Buffer} or {String} properties. I.e.:\n\t *\n\t * job.addFiles([{\n\t * \tfilename: 'foo.ino',\n\t * \tdata: fs.readFileSync('foo.ino')\n\t * }]);\n\t *\n\t * @param {Array} files Array of files to add\n\t * @returns {this} `this` object\n\t */\n\taddFiles(files) {\n\t\tthis._files.push(...files);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets buildpacks to be used during compilation.\n\t * List will be appended by storing buildpack.\n\t *\n\t * @param {Array} buildpacks {Array} of {String}s specifying Docker images\n\t * @returns {this} `this` object\n\t */\n\tsetBuildpacks(buildpacks) {\n\t\tthis._buildpacks = buildpacks;\n\t\tthis._buildpacks.push('particle/buildpack-store');\n\t\treturn this;\n\t}\n\n\t/**\n\t * Submits job\n\t *\n\t * @param  {Number} timeout Job timeout in ms\n\t * @return {Promise} Will resolve when job finished.\n\t */\n\tsubmit(timeout) {\n\t\tfor (let buildpack of this._buildpacks) {\n\t\t\t// We want each buildpack to pass output directory to input of a\n\t\t\t// next one. Setting following envs and output argument does that\n\t\t\tlet env = {\n\t\t\t\tINPUT_FROM_STDIN: true,\n\t\t\t\tARCHIVE_OUTPUT: true\n\t\t\t};\n\n\t\t\tif (typeof buildpack === 'string') {\n\t\t\t\tthis.addStep(buildpack, env, undefined, '/output.tar.gz');\n\t\t\t} else {\n\t\t\t\tlet args = [\n\t\t\t\t\tbuildpack.source,\n\t\t\t\t\tenv,\n\t\t\t\t\tbuildpack.name,\n\t\t\t\t\t'/output.tar.gz',\n\t\t\t\t\tbuildpack.refresh ? buildpack.refresh : undefined,\n\t\t\t\t\tbuildpack.networkMode ? buildpack.networkMode : undefined,\n\t\t\t\t\tbuildpack.cpuShares ? buildpack.cpuShares : undefined,\n\t\t\t\t\tbuildpack.memory ? buildpack.memory : undefined\n\t\t\t\t];\n\t\t\t\tthis.addStep.apply(this, args);\n\t\t\t}\n\t\t}\n\n\t\treturn new Promise(this._prepareInput.bind(this))\n\t\t\t.then(super.submit.bind(this, timeout))\n\t\t\t.then(this._onResolved.bind(this),\n\t\t\t\t\t\tthis._onRejected.bind(this));\n\t}\n\n\t/**\n\t * If any files were passed, archive them and set as input.\n\t *\n\t * @param {Function} callback Callback when finished\n\t * @returns {Mixed} {undefined} or result of the callback\n\t */\n\t_prepareInput(callback) {\n\t\t// If we have files to compile, archive them first\n\t\tif (this._files.length > 0) {\n\t\t\treturn callback(this._archiveFiles().then((archive) => {\n\t\t\t\tthis.setInput(archive);\n\t\t\t}));\n\t\t}\n\t\tcallback();\n\t}\n\n\t/**\n\t * Callback for successful compilation. Any contents of last buildpack's\n\t * output should be in Redis. This will fetch and return it.\n\t *\n\t * @returns {Promise} Resolved with job output\n\t */\n\t_onResolved() {\n\t\t// Compilation finished.\n\t\tlet client = redis.createClient(this._manager._redisUrl, {\n\t\t\t'return_buffers': true\n\t\t});\n\t\treturn client.hgetallAsync(this.id).then((output) => {\n\t\t\tclient.quit();\n\t\t\t// Return the output\n\t\t\treturn output;\n\t\t});\n\t}\n\n\t/**\n\t * Callback for failed compilation.\n\t *\n\t * @return {Promise} Rejected promise with logs\n\t */\n\t_onRejected() {\n\t\treturn this.getLogs().then((logs) => {\n\t\t\t// Because successful `getLogs` call resolves instead of rejecting\n\t\t\t// we're returning a rejected promise instead\n\t\t\treturn Promise.reject(logs);\n\t\t});\n\t}\n\n\t/**\n\t * Create tar.gz archive from files\n\t *\n\t * @returns {Buffer} archived files\n\t * @private\n\t */\n\t_archiveFiles() {\n\t\t// Defer promise\n\t\tlet _resolve, _reject;\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\t_resolve = resolve;\n\t\t\t_reject = reject;\n\t\t});\n\t\t// Prepare output stream and buffer\n\t\tlet stream = new PassThrough();\n\t\tlet buffer = new Buffer('');\n\t\tstream.on('finish', () => {\n\t\t\t_resolve(buffer);\n\t\t});\n\t\tstream.on('data', (data) => {\n\t\t\tbuffer = Buffer.concat([buffer, data]);\n\t\t});\n\n\t\t// Initialize archiver\n\t\tlet archive = archiver('tar', {gzip: true});\n\t\tarchive.on('error', (err) => {\n\t\t\t_reject(err);\n\t\t});\n\t\tarchive.pipe(stream);\n\n\t\t// Append all files\n\t\tfor (let file of this._files) {\n\t\t\tarchive.append(file.data, file);\n\t\t}\n\t\tarchive.finalize();\n\t\treturn promise;\n\t}\n}\n"]}